AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2KeyPair:
    Description: The EC2 EC2KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Description: Enter AMI Id 
    Type: String
  MasterInstanceType:
    Description: Enter your preffered instance type for Master.
    Type: String
  SlaveInstanceType:
    Description: Enter your preffered instance type for Slave.
    Type: String
  MasterVolume:
    Description: Enter preffered volume size for master
    Type: String
  SlaveVolume:
    Description: Enter preffered volume size for slave
    Type: String
  MinMasterInstance:
    Description: Enter preffered minimum AutoScalingGroup size for master instance
    Type: String
  MaxMasterInstance:
    Description: Enter preffered maximum AutoScalingGroup size for master instance
    Type: String
  DesireMasterInstance:
    Description: PEnter preffered desire AutoScalingGroup size for master instance
    Type: String
  MinSlaveInstance:
    Description: Enter preffered minimum AutoScalingGroup size for slave instance
    Type: String
  MaxSlaveInstance:
    Description: Enter preffered maximum AutoScalingGroup size for slave instance
    Type: String
  DesireSlaveInstance:
    Description: Enter preffered maximum AutoScalingGroup size for slave instance
    Type: String


Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: 'JMETER VPC'
  VPCCidrBlock:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: 'JMETER-IGW'
  EgressOnlyInternetGateway:
    Type: 'AWS::EC2::EgressOnlyInternetGateway'
    Properties:
      VpcId: !Ref VPC
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  MasterSubnet:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Master Public Subnet'
      - Key: Reach
        Value: public
  SlaveSubnet:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Slave Public Subnet'
      - Key: Reach
        Value: public
  RouteTableMaster:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Master RT'
  RouteTableSlave: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Slave RT'
  RouteTableAssociationMaster:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MasterSubnet
      RouteTableId: !Ref RouteTableMaster
  RouteTableAssociationSlave:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SlaveSubnet
      RouteTableId: !Ref RouteTableSlave
  RouteTableMasterInternetRoute: 
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableMaster
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTableSlaveInternetRoute: 
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableSlave
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref MasterSubnet
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "all-access"
      GroupDescription: "all-access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          Description: "Allow SSH Access"
          CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: JMeter SG

  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "RootRole"
  
  LaunchTemplateJmeter:
      Type: AWS::EC2::LaunchTemplate
      Properties: 
        LaunchTemplateName: LaunchTemplateMaster
        LaunchTemplateData: 
          BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref SlaveVolume
          ImageId: !Ref AmiId
          KeyName: !Ref EC2KeyPair
          InstanceType: !Ref SlaveInstanceType
          IamInstanceProfile:
            Arn: !GetAtt
              - RootInstanceProfile
              - Arn
          SecurityGroupIds:
            - !Ref SG
          UserData: 
            Fn::Base64:
                    !Join 
                  - ""
                  - - "#!/bin/bash\n"
                    - "sudo su\n"
                    - "cd /home/ec2-user/\n"
                    - "wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n"
                    - "sudo rpm -U ./amazon-cloudwatch-agent.rpm\n"
                    - "aws s3 cp s3://hakim/config.json /opt/aws/amazon-cloudwatch-agent/bin/\n"
                    - "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s\n"
                    - "sudo yum install java-1.8.0-openjdk-devel -y\n"
                    - "sed -i 's|PATH=$PATH:$HOME/bin|PATH=$PATH:$HOME/bin:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.282.b08-1.amzn2.0.1.x86_64/jre|g' ~/.bash_profile\n"
                    - "source ~/.bash_profile\n"
                    - "wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.4.1.tgz\n"
                    - "tar xvf apache-jmeter-5.4.1.tgz\n"
                    - "sed -i '$ a server.rmi.ssl.disable=true' /home/ec2-user/apache-jmeter-5.4.1/bin/user.properties\n"
                    - "sed -i '$ a *     soft   nofile  65535' /etc/security/limits.conf\n"
                    - "sed -i '$ a *     hard   nofile  65535 ' /etc/security/limits.conf\n"
                    - "sed -i '$ a root     soft   nofile  65535 ' /etc/security/limits.conf\n"
                    - "sed -i '$ a root     hard   nofile  65535' /etc/security/limits.conf\n"
                    - "sed -i '$ a session required /lib/security/pam_limits.so' /etc/pam.d/login\n"
                    - "echo 65535 > /proc/sys/fs/file-max\n"
                    - "sed -i '$ a session    required     pam_limits.so' /etc/pam.d/sshd\n"
                    - "sudo su\n"
                    - 'echo export _JAVA_OPTIONS=\"-Xms1g -Xmx64g\" > /etc/profile.d/j_ops.sh'
                    - "\n"
                    - "sed -i 's/set HEAP=-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m/set HEAP=-Xms1g -Xmx64g -XX:MaxMetaspaceSize=256m/g'  \n"

  JMasterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Jmeter-Master
      MinSize: !Ref MinMasterInstance
      MaxSize: !Ref MaxMasterInstance
      DesiredCapacity: !Ref DesireMasterInstance
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: Master
          PropagateAtLaunch: "true"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateJmeter
        Version: !GetAtt LaunchTemplateJmeter.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref MasterSubnet

  JslaveAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Jmeter-Slave
      MinSize: !Ref MinSlaveInstance
      MaxSize: !Ref MaxSlaveInstance
      DesiredCapacity: !Ref DesireMasterInstance
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: Slave
          PropagateAtLaunch: "true"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateJmeter
        Version: !GetAtt LaunchTemplateJmeter.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref SlaveSubnet























